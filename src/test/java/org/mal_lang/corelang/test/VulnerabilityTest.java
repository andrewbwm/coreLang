package org.mal_lang.corelang.test;

import core.Attacker;
import org.junit.jupiter.api.Test;

public class VulnerabilityTest extends CoreLangTest {
    private static class VulnerabilityTestModel {
        public UnknownVulnerability vuln;

        public VulnerabilityTestModel(boolean interaction, boolean remove) {
            vuln = new UnknownVulnerability("vunlnerability", interaction, remove);
        }
  }

    @Test
    public void testAttemptAbuseVulnerability() {
        printTestName(Thread.currentThread().getStackTrace()[1].getMethodName());
        var model = new VulnerabilityTestModel(false, false);

        Attacker attacker = new Attacker();
        attacker.addAttackPoint(model.vuln.attemptAbuse);
        attacker.attack();

        model.vuln.abuse.assertCompromisedInstantaneously();
        model.vuln.impact.assertUncompromised();
    }

    @Test
    public void testAttemptAbuseVulnerabilityRemoved() {
        printTestName(Thread.currentThread().getStackTrace()[1].getMethodName());
        var model = new VulnerabilityTestModel(false, true);

        Attacker attacker = new Attacker();
        attacker.addAttackPoint(model.vuln.attemptAbuse);
        attacker.attack();

        model.vuln.abuse.assertUncompromised();
        model.vuln.impact.assertUncompromised();

    }

    @Test
    public void testAttemptAbuseVulnerabilityUserInteraction() {
        printTestName(Thread.currentThread().getStackTrace()[1].getMethodName());
        var model = new VulnerabilityTestModel(true, false);

        Attacker attacker = new Attacker();
        attacker.addAttackPoint(model.vuln.attemptAbuse);
        attacker.attack();

        model.vuln.abuse.assertCompromisedInstantaneously();
        model.vuln.impact.assertUncompromised();

    }

}
