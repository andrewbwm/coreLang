category Vulnerability {

  abstract asset ManualVulnerability extends Vulnerability
  {
    | incoming
      developer info: "This attack step is used as a single entry point for all vulnerabilities in the manual modeling scenario."
      ->  attemptAbuse

    # userInteracts [Bernoulli(0.5)]
      user info: "Some exploits require user interaction. This defense specifies the probability of such interaction on the given application."
      // ->  abuse
  }

  asset ManualLowComplexityVulnerability extends ManualVulnerability
  {
    & abuse [Exponential(1.0)]
      user info: "The attacker is attempting to abuse a vulnerability in an application."
      -> exploits.impact
  }

  asset ManualHighComplexityVulnerability extends ManualVulnerability
  {
    & abuse [Exponential(0.01)]
      user info: "The attacker is attempting to abuse a vulnerability in an application."
      -> exploits.impact
  }
}

category Exploit {

  asset ManualHighImpactExploit extends Exploit
    user info: "An high impact exploit is assumed to grant the attacker full control of the vulnerable application's executing code."
  {
    | impact
      user info: "This exploit is assumed to grant the attacker full control of the vulnerable application's executing code"
      -> vulnerability.application.codeExecution
  }

  asset ManualLowImpactExploit extends Exploit
    user info: "Confidentiality Impact: Low, Integrity Impact: Low, Availability Impact: Low"
  {
    | impact
      user info: "Confidentiality Impact: Low, Integrity Impact: Low, Availability Impact: Low"
      -> lowImpact

    | lowImpact @hidden [Bernoulli(0.5)]
      -> vulnerability.application.read,
         vulnerability.application.modify,
         vulnerability.application.deny
  }

  asset ManualNoImpactExploit extends Exploit
    user info: "Confidentiality Impact: Low, Integrity Impact: Low, Availability Impact: None"
  {
    | impact
      -> lowImpact

    | lowImpact @hidden [Bernoulli(0.5)]
  }

}
